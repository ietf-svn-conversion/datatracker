# Copyright The IETF Trust 2024, All Rights Reserved
#
# Uses only Python standard lib
#

import argparse
import datetime
import json
import shutil
import stat
import sys

from pathlib import Path
from tempfile import TemporaryDirectory

# Default options
POSTCONFIRM_PATH = "/a/postconfirm/wrapper"
VDOMAIN = "virtual.ietf.org"
ADOMAINS = ["ietf.org"]


def generate_files(records, adest, vdest, postconfirm, vdomain, adomains):
    """Generate files from an iterable of records
    
    If adest or vdest exists as a file, it will be overwritten. If it is a directory, files
    with the default names (draft-aliases and draft-virtual) will be created, but existing
    files _will not_ be overwritten!
    """
    with TemporaryDirectory() as tmpdir:
        tmppath = Path(tmpdir)
        apath = tmppath / "draft-aliases"
        vpath = tmppath / "draft-virtual"

        with apath.open("w") as afile, vpath.open("w") as vfile:
            date = datetime.datetime.now(datetime.timezone.utc)
            signature = f"# Generated by {Path(__file__).absolute()} at {date}\n"
            afile.write(signature)
            vfile.write(signature)

            for alias, address_list in records.items():
                filtername = f"xfilter-{alias}"
                afile.write(f'{filtername + ":":64s}  "|{postconfirm} filter expand-{alias} {vdomain}"\n')
                for domain in adomains:
                    vfile.write(f"{f'{alias}@{domain}':64s}  {filtername}\n")
                vfile.write(f"{f'expand-{alias}@{vdomain}':64s}  {', '.join(address_list)}\n")

        perms = stat.S_IWUSR | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
        apath.chmod(perms)
        vpath.chmod(perms)
        shutil.move(apath, adest)
        shutil.move(vpath, vdest)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Convert a JSON stream of draft alias definitions into alias / virtual alias files."
    )
    parser.add_argument(
        "--output-dir",
        default="./",
        type=Path,
        help="Destination for output files.",
    )
    parser.add_argument(
        "--postconfirm", 
        default=POSTCONFIRM_PATH, 
        help=f"Full path to postconfirm executable (defaults to {POSTCONFIRM_PATH}",
    )
    parser.add_argument(
        "--vdomain",
        default=VDOMAIN,
        help=f"Virtual domain (defaults to {VDOMAIN}_",
    )
    parser.add_argument(
        "--adomain",
        action="append",
        default=[],
        help=f"Domains in which to create aliases (multiple allowed; if none are specified, defaults to {ADOMAINS})"
    )
    args = parser.parse_args()
    if not args.output_dir.is_dir():
        sys.stderr.write("Error: output-dir must be a directory")
    data = json.load(sys.stdin)
    generate_files(
        data["aliases"], 
        adest=args.output_dir / "draft-aliases",
        vdest=args.output_dir / "draft-virtual",
        postconfirm=args.postconfirm,
        vdomain=args.vdomain,
        adomains=args.adomain or ADOMAINS,
    ) 
   
