# Generated by Django 2.2.28 on 2022-08-08 11:37

import datetime

from django.db import migrations


# date of last meeting with an empty time_zone before this migration
LAST_EMPTY_TZ = datetime.date(2022, 7, 1)


def forward(apps, schema_editor):
    Meeting = apps.get_model('meeting', 'Meeting')

    # Check that we will be able to identify the migrated meetings later
    old_meetings_in_pst8pdt = Meeting.objects.filter(type_id='interim', time_zone='PST8PDT', date__lte=LAST_EMPTY_TZ)
    assert old_meetings_in_pst8pdt.count() == 0, 'not expecting interim meetings in PST8PDT time_zone'

    meetings_with_empty_tz = Meeting.objects.filter(time_zone='')
    # check our expected conditions
    for mtg in meetings_with_empty_tz:
        assert mtg.type_id == 'interim', 'was not expecting non-interim meetings to be affected'
        assert mtg.date <= LAST_EMPTY_TZ, 'affected meeting outside expected date range'
        mtg.time_zone = 'PST8PDT'

    # commit the changes
    Meeting.objects.bulk_update(meetings_with_empty_tz, ['time_zone'])


def reverse(apps, schema_editor):
    Meeting = apps.get_model('meeting', 'Meeting')
    meetings_to_restore = Meeting.objects.filter(time_zone='PST8PDT', date__lte=LAST_EMPTY_TZ)
    for mtg in meetings_to_restore:
        mtg.time_zone = ''
    # commit the changes
    Meeting.objects.bulk_update(meetings_to_restore, ['time_zone'])


class Migration(migrations.Migration):

    dependencies = [
        ('meeting', '0056_use_timezone_now_for_meeting_models'),
    ]

    operations = [
        migrations.RunPython(forward, reverse),
    ]
