# Generated by Django 4.2.2 on 2023-06-20 18:36

from django.db import migrations


EVENT_TYPES_TO_IGNORE = [
        "created_ballot",
        "closed_ballot",
        "sent_ballot_announcement",
        "changed_ballot_position",
        "changed_ballot_approval_text",
        "changed_ballot_writeup_text",
        "changed_state",  # the states changed refer to the drafts
        "expired_document",  # does not make sense for a published RFC
        "new_revision",  # does not make sense for a published RFC
    ]


def forward(apps, schema_editor):
    """Move RFC events from the draft to the rfc Documet"""
    DocAlias = apps.get_model("doc", "DocAlias")
    DocEvent = apps.get_model("doc", "DocEvent")
    Document = apps.get_model("doc", "Document")

    migratable_events = DocEvent.objects.exclude(type__in=EVENT_TYPES_TO_IGNORE)
    
    # special case for rfc 6312/6342 draft, which has two published_rfc events
    ignore = ["rfc6312", "rfc6342"]  # do not reprocess these later
    rfc6312 = Document.objects.get(name="rfc6312")
    rfc6342 = Document.objects.get(name="rfc6342")
    draft = DocAlias.objects.get(name="rfc6312").docs.first()
    assert draft == DocAlias.objects.get(name="rfc6342").docs.first()
    published_events = list(
        DocEvent.objects.filter(doc=draft, type="published_rfc").order_by("time")
    )
    assert len(published_events) == 2
    (
        pub_event_6312,
        pub_event_6342,
    ) = published_events  # order matches pub dates at rfc-editor.org
    pub_event_6312.doc = rfc6312
    pub_event_6312.save()
    migratable_events.filter(
        doc=draft, time__gt=pub_event_6312.time, time__lt=pub_event_6342.time
    ).update(doc=rfc6312)
    pub_event_6342.doc = rfc6342
    pub_event_6342.save()
    migratable_events.filter(doc=draft, time__gt=pub_event_6342.time).update(doc=rfc6342)

    for rfc in Document.objects.filter(type_id="rfc").exclude(name__in=ignore):
        draft = DocAlias.objects.get(name=rfc.name).docs.first()
        assert draft is not None
        published_event = DocEvent.objects.get(doc=draft, type="published_rfc")
        published_event.doc = rfc
        published_event.save()
        migratable_events.filter(doc=draft, time__gt=published_event.time).update(
            doc=rfc
        )


class Migration(migrations.Migration):
    dependencies = [
        ("doc", "0007_create_rfc_documents"),
    ]

    operations = [
        migrations.RunPython(forward),
    ]
