# Default values for datatracker.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Define serviceAccount names for components. Defaults to component's fully qualified name.
##
serviceAccounts:
  datatracker:
    create: true
    name: datatracker
    annotations: {}
  celery:
    create: true
    name: celery
    annotations: {}
  beat:
    create: true
    name: beat
    annotations: {}
  rabbitmq:
    create: true
    name: rabbitmq
    annotations: {}
  memcached:
    create: true
    name: memcached
    annotations: {}

# -------------------------------------------------------------
# DATATRACKER
# -------------------------------------------------------------

datatracker:
  name: datatracker
  image:
    repository: "ghcr.io/ietf-tools/datatracker"
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # tag: "v1.1.0"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  ingress:
    enabled: false
    className: ""
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: datatracker.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  livenessProbe:
    httpGet:
      # /submit/tool-instructions/ just happens to be cheap until we get a real health endpoint
      path: /submit/tool-instructions/
      port: http

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

#readinessProbe:
#  httpGet:
#    # /submit/tool-instructions/ just happens to be cheap until we get a real health endpoint
#    path: /submit/tool-instructions/
#    port: http

  replicaCount: 1

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  startupProbe:
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 60
    httpGet:
      # /submit/tool-instructions/ just happens to be cheap until we get a real health endpoint
      path: /submit/tool-instructions/
      port: http

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: settings-local-volume
      configMap:
        name: django-configmap
    - name: cache-volume
      emptyDir:
        sizeLimit: 1Gi
    - name: staging-volume
      emptyDir:
        sizeLimit: 1Gi
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: settings-local-volume
      mountPath: /workspace/ietf/settings_local.py
      subPath: settings_local.py
      readOnly: true
    - name: cache-volume
      mountPath: "/a/cache"
    - name: staging-volume
      mountPath: "/test/staging"
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  tolerations: []

  nodeSelector: {}

  affinity: {}

# -------------------------------------------------------------
# CELERY
# -------------------------------------------------------------

celery:
  name: celery
  image: {}
    # defaults to datatracker settings if not specified separately
    #repository: "ghcr.io/ietf-tools/datatracker"
    #pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # tag: "v1.1.0"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  livenessProbe:
    exec:
      command: ["celery", "inspect", "ping"] 
    periodSeconds: 30
    timeoutSeconds: 5

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  replicaCount: 1

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  startupProbe:
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 60
    exec:
      command: ["celery", "inspect", "ping"]

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: settings-local-volume
      configMap:
        name: django-configmap
    - name: cache-volume
      emptyDir:
        sizeLimit: 1Gi
    - name: staging-volume
      emptyDir:
        sizeLimit: 1Gi
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: settings-local-volume
      mountPath: /workspace/ietf/settings_local.py
      subPath: settings_local.py
      readOnly: true
    - name: cache-volume
      mountPath: "/a/cache"
    - name: staging-volume
      mountPath: "/test/staging"
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  tolerations: []

  nodeSelector: {}

  affinity: {}

# -------------------------------------------------------------
# BEAT
# -------------------------------------------------------------

beat:
  name: beat
  image: {}
    # defaults to datatracker settings if not specified separately
    # repository: "ghcr.io/ietf-tools/datatracker"
    # pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    # tag: "v1.1.0"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  livenessProbe:
    exec:
      command: ["celery", "inspect", "ping"]
    periodSeconds: 30
    timeoutSeconds: 5

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  replicaCount: 1

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  startupProbe:
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 60
    exec:
      command: ["celery", "inspect", "ping"]

  # Additional volumes on the output Deployment definition.
  volumes:
    - name: settings-local-volume
      configMap:
        name: django-configmap
    - name: cache-volume
      emptyDir:
        sizeLimit: 1Gi
    - name: staging-volume
      emptyDir:
        sizeLimit: 1Gi
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  # Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: settings-local-volume
      mountPath: /workspace/ietf/settings_local.py
      subPath: settings_local.py
      readOnly: true
    - name: cache-volume
      mountPath: "/a/cache"
    - name: staging-volume
      mountPath: "/test/staging"
  # - name: foo
  #   mountPath: "/etc/foo"
  #   readOnly: true

  tolerations: []

  nodeSelector: {}

  affinity: {}

# -------------------------------------------------------------
# RABBITMQ
# -------------------------------------------------------------

rabbitmq:
  name: rabbitmq
  image:
    repository: "ghcr.io/ietf-tools/datatracker-mq"
    pullPolicy: IfNotPresent
    tag: "latest"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  livenessProbe:
    exec:
      command: ["rabbitmq-diagnostics", "-q", "ping"]
    periodSeconds: 30
    timeoutSeconds: 5

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  replicaCount: 1

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 80

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  startupProbe:
    initialDelaySeconds: 15
    periodSeconds: 5
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 60
    exec:
      command: ["rabbitmq-diagnostics", "-q", "ping"]

  # Additional volumes on the output Deployment definition.
  volumes: []
    # - name: foo
    #   secret:
    #     secretName: mysecret
    #     optional: false
  
    # Additional volumeMounts on the output Deployment definition.
  volumeMounts: []
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true

  tolerations: []

  nodeSelector: {}

  affinity: {}

# -------------------------------------------------------------
# MEMCACHED
# -------------------------------------------------------------

memcached:
  name: memcached
  image:
    repository: "memcached"
    pullPolicy: IfNotPresent
    tag: "1.6-alpine"

  imagePullSecrets: []
  nameOverride: ""
  fullnameOverride: ""

  podAnnotations: {}
  podLabels: {}

  podSecurityContext: {}
    # fsGroup: 2000

  replicaCount: 1

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  service:
    type: ClusterIP
    port: 11211

  serviceAccount:
    # Specifies whether a service account should be created
    create: true
    # Automatically mount a ServiceAccount's API credentials?
    automount: true
    # Annotations to add to the service account
    annotations: {}
    # The name of the service account to use.
    # If not set and create is true, a name is generated using the fullname template
    name: ""

  tolerations: []

  nodeSelector: {}

  affinity: {}

# -------------------------------------------------------------
# COMMON
# -------------------------------------------------------------

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

env:
  # n.b., these are debug values / non-secret secrets
  # DBHOST: "host.minikube.internal"
  # DBPORT: "5432"
  DBNAME: "datatracker"
  DBUSER: "django"
  DBPASS: "RkTkDPFnKpko"
  DJANGO_SECRET_KEY: "PDwXboUq!=hPjnrtG2=ge#N$Dwy+wn@uivrugwpic8mxyPfHk"
